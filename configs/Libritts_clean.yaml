# Finetune VQ-Diffusion-F on coco dataset
model:
  target: ctx_text2vec.modeling.models.text2vec.Text2Vec
  params:

    diffusion_config:      
      target: ctx_text2vec.modeling.transformers.text2vec_transformer.Text2VecTransformer
      params:
        diffusion_step: 100
        ctt_T: 0.89999
        alpha_init_type: 'alpha1'       # init_type = fix or cos or linear 
        auxiliary_loss_weight: 5.0e-4
        adaptive_auxiliary_loss: True
        mask_weight: [1, 1]    # the loss weight on mask region and non-mask region
        num_cls: 23633

        transformer_config:
          target: ctx_text2vec.modeling.transformers.transformer_utils.DiffusionTransformer
          params:
            codebook_path: feats/vqidx/codebook.npy
            label2vqidx_path: feats/vqidx/label2vqidx
            attn_type: 'selfcross'
            n_layer: 12
            n_embd: 512 # the dim of embedding dims
            condition_dim: 384
            n_head: 8
            attn_pdrop: 0.0
            resid_pdrop: 0.0
            block_activate: GELU2
            timestep_type: 'adalayernorm'    # adainsnorm or adalayernorm and abs
            mlp_hidden_times: 4

solver:
  base_lr: 3.0e-6
  adjust_lr: none # not adjust lr according to total batch_size
  max_epochs: 500
  save_epochs: 1
  validation_epochs: 10
  sample_iterations: epoch  # epoch #30000      # how many iterations to perform sampling once ?
  print_specific_things: True

  # config for ema
  ema:
    decay: 0.99
    update_interval: 25
    device: cpu

  clip_grad_norm:
    target: ctx_text2vec.engine.clip_grad_norm.ClipGradNorm
    params:
      start_iteration: 0
      end_iteration: 5000
      max_norm: 0.5
  optimizers_and_schedulers: # a list of configures, so we can config several optimizers and schedulers
  - name: none # default is None
    optimizer:
      target: torch.optim.AdamW
      params: 
        betas: !!python/tuple [0.9, 0.96]
        weight_decay: 4.5e-2

    scheduler:
      step_iteration: 1
      target: ctx_text2vec.engine.lr_scheduler.ReduceLROnPlateauWithWarmup
      params:
        factor: 0.5
        patience: 60000
        min_lr: 1.0e-6
        threshold: 1.0e-1
        threshold_mode: rel
        warmup_lr: 2.0e-4 # the lr to be touched after warmup
        warmup: 1000 

dataloader:

  batch_max_tokens: 3600
  num_workers: 3
  train_datasets: # a list of configures, so we can combine several schedulers
    - target: ctx_text2vec.data.tts_dataset.TTSDataset
      params:
        data_root: data/train_clean
        lexicon_path: data/lang_1phn/train_clean_units.txt
  validation_datasets:
    - target: ctx_text2vec.data.tts_dataset.TTSDataset
      params:
        data_root: data/dev_clean
        lexicon_path: data/lang_1phn/train_clean_units.txt
